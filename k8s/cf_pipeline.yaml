version: "1.0"
stages:
  - "clone"
  - "build"
  - "test"
  - "deploy"
steps:
  main_clone:
    type: "git-clone"
    description: "Cloning main repository..."
    repo: "MetaCell/NetPyNE-UI"
    revision: "${{CF_BRANCH}}"
    stage: "clone"
    when:
      branch:
        only:
          - "${{CF_BRANCH}}"
  builds:
    type: parallel 
    stage: build 
    steps:
      netpyne-ui:
        title: Building NetPyNE-UI
        type: build
        stage: build
        image_name: netpyne-ui
        working_directory: ${{main_clone}}
        tag: 'np-${{CF_SHORT_REVISION}}'
        build_arguments:
          - GEPPETTO_VERSION=${{PYGEPPETTO_VERSION}}
          - BUILD_ARGS=${{BUILD_ARGS}}
        registry: ${{REGISTRY}}
        when:
          branch:
            only:
              - "${{CF_BRANCH}}"
      test_build:
        stage: build
        type: build
        title: Building NetPyNE test image
        image_name: netpyne-test
        working_directory: ./tests/frontend/e2e
        dockerfile: Dockerfile.testing
        buildkit: true
  tutorial_test:
    type: composition
    title: Running Tutorial Tests
    description: Temporary test environment
    stage: test
    working_directory: ./tests/frontend/e2e
    composition:
      version: '2'
      services:
        app:
          image: '${{netpyne-ui}}'
          ports:
            - 8888
    composition_candidates:
      test:
        image: '${{test_build}}'
        links:
         - app
        working_dir: /home/pptruser
        environment:
        - TEST_URL=http://app:8888
        command: bash -c 'ls -l && npm run Tutorial_1_test'
  feature_test:
    type: composition
    title: Running Feature Tests
    description: Temporary test environment
    stage: test
    working_directory: ./tests/frontend/e2e
    composition:
      version: '2'
      services:
        app:
          image: '${{netpyne-ui}}'
          working_dir: /home/pptruser
          ports:
            - 8888
    composition_candidates:
      test:
        image: '${{test_build}}'
        links:
         - app
        working_dir: /home/pptruser
        environment:
        - TEST_URL=http://app:8888
        command: bash -c 'ls -l && npm run Tutorial_1_test'
  # installing_chart:
  #   type: helm
  #   stage: deploy
  #   title: "Deploy chart"
  #   working_directory: k8s
  #   arguments:
  #     action: install
  #     chart_name: jupyterhub
  #     release_name: ${{RELEASE_NAME}}
  #     helm_version: 3.0.2
  #     chart_repo_url: 'https://jupyterhub.github.io/helm-chart/'
  #     chart_version: '0.9.0'
  #     kube_context: ${{CLUSTER_NAME}}
  #     namespace: ${{NAMESPACE}}
  #     custom_value_files: 
  #       - 'cf_values.yaml'
  #     custom_values:
  #       - 'hub_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}-${{CF_BUILD_TIMESTAMP}}'
  #       - 'singleuser_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}-${{CF_BUILD_TIMESTAMP}}'
  #       - 'singleuser_memory_limit=${{MEMORY_MAX}}'
  #       - 'singleuser_memory_guarantee=${{MEMORY_MIN}}'
  #       - 'proxy_secretToken=${{SECRET_TOKEN}}'
